#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub enum Opcode { 
    // 0x - 0x0B (Stop and Arithmetic Operations)
    STOP, ADD, MUL, SUB, DIV, SDIV, MOD, SMOD, ADDMOD, MULMOD, EXP, SIGNEXTEND,

    // 0x1 - 0x1D (Comparison & Bitwise Logic Operations)
    LT, GT, SLT, SGT, EQ, ISZERO, AND, OR, XOR, NOT, BYTE, SHL, SHR, SAR,

    SHA3, // (0x2 SHA3)

    // 0x3 - 0x3F (Environmental Information)
    ADDRESS, BALANCE, ORIGIN, CALLER, CALLVALUE, CALLDATALOAD, CALLDATASIZE, CALLDATACOPY, CODESIZE, CODECOPY, GASPRICE, EXTCODESIZE,
    EXTCODECOPY, RETURNDATASIZE, RETURNDATACOPY, EXTCODEHASH,

    // 0x40 - 0x48 (Block information)
    BLOCKHASH, COINBASE, TIMESTAMP, NUMBER, DIFFICULTY, GASLIMIT, CHAINID, SELFBALANCE, BASEFEE,

    // 0x50 - 0x5B (Stack Memory Storage and Flow Operations)
    POP, MLOAD, MSTORE, MSTORE8, SLOAD, SSTORE, JUMP, JUMPI, PC, MSIZE, GAS, JUMPDEST,

    // 0x60 - 0x7F (Push Operations)
    PUSH(usize),
    // 0x80 - 0x8F (Duplication Operations)
    DUP(usize),
    // 0x90 - 0x9F (Exchange Operations)
    SWAP(usize),
    // 0xA0 - 0xA4 (Logging Operations)
    LOG(usize),

    // 0xF0 - 0xFF (System operations)
    CREATE, CALL, CALLCODE, RETURN, DELEGATECALL, CREATE2, STATICCALL, REVERT, INVALID, SELFDESTRUCT
}
impl From<u8> for Opcode {
    fn from(val: u8) -> Opcode {
        match val {
            0x00 => Opcode::STOP,
            0x01 => Opcode::ADD,
            0x02 => Opcode::MUL,
            0x03 => Opcode::SUB,
            0x04 => Opcode::DIV,
            0x05 => Opcode::SDIV,
            0x06 => Opcode::MOD,
            0x07 => Opcode::SMOD,
            0x08 => Opcode::ADDMOD,
            0x09 => Opcode::MULMOD,
            0x0A => Opcode::EXP,
            0x0B => Opcode::SIGNEXTEND,
            0x10 => Opcode::LT,
            0x11 => Opcode::GT,
            0x12 => Opcode::SLT,
            0x13 => Opcode::SGT,
            0x14 => Opcode::EQ,
            0x15 => Opcode::ISZERO,
            0x16 => Opcode::AND,
            0x17 => Opcode::OR,
            0x18 => Opcode::XOR,
            0x19 => Opcode::NOT,
            0x1A => Opcode::BYTE,
            0x1B => Opcode::SHL,
            0x1C => Opcode::SHR,
            0x1D => Opcode::SAR,
            0x20 => Opcode::SHA3,
            0x30 => Opcode::ADDRESS,
            0x31 => Opcode::BALANCE,
            0x32 => Opcode::ORIGIN,
            0x33 => Opcode::CALLER,
            0x34 => Opcode::CALLVALUE,
            0x35 => Opcode::CALLDATALOAD,
            0x36 => Opcode::CALLDATASIZE,
            0x37 => Opcode::CALLDATACOPY,
            0x38 => Opcode::CODESIZE,
            0x39 => Opcode::CODECOPY,
            0x3A => Opcode::GASPRICE,
            0x3B => Opcode::EXTCODESIZE,
            0x3C => Opcode::EXTCODECOPY,
            0x3D => Opcode::RETURNDATASIZE,
            0x3E => Opcode::RETURNDATACOPY,
            0x3F => Opcode::EXTCODEHASH,
            0x40 => Opcode::BLOCKHASH,
            0x41 => Opcode::COINBASE,
            0x42 => Opcode::TIMESTAMP,
            0x43 => Opcode::NUMBER,
            0x44 => Opcode::DIFFICULTY,
            0x45 => Opcode::GASLIMIT,
            0x46 => Opcode::CHAINID,
            0x47 => Opcode::SELFBALANCE,
            0x48 => Opcode::BASEFEE,
            0x50 => Opcode::POP,
            0x51 => Opcode::MLOAD,
            0x52 => Opcode::MSTORE,
            0x53 => Opcode::MSTORE8,
            0x54 => Opcode::SLOAD,
            0x55 => Opcode::SSTORE,
            0x56 => Opcode::JUMP,
            0x57 => Opcode::JUMPI,
            0x58 => Opcode::PC,
            0x59 => Opcode::MSIZE,
            0x5A => Opcode::GAS,
            0x5B => Opcode::JUMPDEST,
            0x60 => Opcode::PUSH(1),
            0x61 => Opcode::PUSH(2),
            0x62 => Opcode::PUSH(3),
            0x63 => Opcode::PUSH(4),
            0x64 => Opcode::PUSH(5),
            0x65 => Opcode::PUSH(6),
            0x66 => Opcode::PUSH(7),
            0x67 => Opcode::PUSH(8),
            0x68 => Opcode::PUSH(9),
            0x69 => Opcode::PUSH(10),
            0x6A => Opcode::PUSH(11),
            0x6B => Opcode::PUSH(12),
            0x6C => Opcode::PUSH(13),
            0x6D => Opcode::PUSH(14),
            0x6E => Opcode::PUSH(15),
            0x6F => Opcode::PUSH(16),
            0x70 => Opcode::PUSH(17),
            0x71 => Opcode::PUSH(18),
            0x72 => Opcode::PUSH(19),
            0x73 => Opcode::PUSH(20),
            0x74 => Opcode::PUSH(21),
            0x75 => Opcode::PUSH(22),
            0x76 => Opcode::PUSH(23),
            0x77 => Opcode::PUSH(24),
            0x78 => Opcode::PUSH(25),
            0x79 => Opcode::PUSH(26),
            0x7A => Opcode::PUSH(27),
            0x7B => Opcode::PUSH(28),
            0x7C => Opcode::PUSH(29),
            0x7D => Opcode::PUSH(30),
            0x7E => Opcode::PUSH(31),
            0x7F => Opcode::PUSH(32),
            0x80 => Opcode::DUP(1),
            0x81 => Opcode::DUP(2),
            0x82 => Opcode::DUP(3),
            0x83 => Opcode::DUP(4),
            0x84 => Opcode::DUP(5),
            0x85 => Opcode::DUP(6),
            0x86 => Opcode::DUP(7),
            0x87 => Opcode::DUP(8),
            0x88 => Opcode::DUP(9),
            0x89 => Opcode::DUP(10),
            0x8A => Opcode::DUP(11),
            0x8B => Opcode::DUP(12),
            0x8C => Opcode::DUP(13),
            0x8D => Opcode::DUP(14),
            0x8E => Opcode::DUP(15),
            0x8F => Opcode::DUP(16),
            0x90 => Opcode::SWAP(1),
            0x91 => Opcode::SWAP(2),
            0x92 => Opcode::SWAP(3),
            0x93 => Opcode::SWAP(4),
            0x94 => Opcode::SWAP(5),
            0x95 => Opcode::SWAP(6),
            0x96 => Opcode::SWAP(7),
            0x97 => Opcode::SWAP(8),
            0x98 => Opcode::SWAP(9),
            0x99 => Opcode::SWAP(10),
            0x9A => Opcode::SWAP(11),
            0x9B => Opcode::SWAP(12),
            0x9C => Opcode::SWAP(13),
            0x9D => Opcode::SWAP(14),
            0x9E => Opcode::SWAP(15),
            0x9F => Opcode::SWAP(16),
            0xA0 => Opcode::LOG(0),
            0xA1 => Opcode::LOG(1),
            0xA2 => Opcode::LOG(2),
            0xA3 => Opcode::LOG(3),
            0xA4 => Opcode::LOG(4),
            0xF0 => Opcode::CREATE,
            0xF1 => Opcode::CALL,
            0xF2 => Opcode::CALLCODE,
            0xF3 => Opcode::RETURN,
            0xF4 => Opcode::DELEGATECALL,
            0xF5 => Opcode::CREATE2,
            0xFA => Opcode::STATICCALL,
            0xFD => Opcode::REVERT,
            0xFF => Opcode::SELFDESTRUCT,
            _ => Opcode::INVALID,
        }
    }
}
impl<'a> From<Opcode> for &'a str {
    fn from(val: Opcode) -> &'a str {
        match val {
            Opcode::STOP => "STOP 0x00",
            Opcode::ADD  => "ADD 0x01",
            Opcode::MUL  => "MUL 0x02",
            Opcode::SUB  => "SUB 0x03",
            Opcode::DIV  => "DIV 0x04",
            Opcode::SDIV => "SDIV 0x05",
            Opcode::MOD  => "MOD 0x06",
            Opcode::SMOD => "SMOD 0x07",
            Opcode::ADDMOD => "ADDMOD 0x08",
            Opcode::MULMOD => "MULMOD 0x09",
            Opcode::EXP => "EXP 0x0A",
            Opcode::SIGNEXTEND => "SIGNEXTEND 0x0B",
            Opcode::LT => "LT 0x10",
            Opcode::GT => "GT 0x11",
            Opcode::SLT => "SLT 0x12",
            Opcode::SGT => "SGT 0x13",
            Opcode::EQ => "EQ 0x14",
            Opcode::ISZERO => "ISZERO 0x15",
            Opcode::AND => "AND 0x16",
            Opcode::OR => "OR 0x17",
            Opcode::XOR => "XOR 0x18",
            Opcode::NOT => "NOT 0x19",
            Opcode::BYTE => "BYTE 0x1A",
            Opcode::SHL => "SHL 0x1B",
            Opcode::SHR => "SHR 0x1C",
            Opcode::SAR => "SAR 0x1D",
            Opcode::SHA3 => "SHA3 0x20",
            Opcode::ADDRESS => "ADDRESS 0x30",
            Opcode::BALANCE => "BALANCE 0x31",
            Opcode::ORIGIN => "ORIGIN 0x32",
            Opcode::CALLER => "CALLER 0x33",
            Opcode::CALLVALUE => "CALLVALUE 0x34",
            Opcode::CALLDATALOAD => "CALLDATALOAD 0x35",
            Opcode::CALLDATASIZE => "CALLDATASIZE 0x36",
            Opcode::CALLDATACOPY => "CALLDATACOPY 0x37",
            Opcode::CODESIZE => "CODESIZE 0x38",
            Opcode::CODECOPY => "CODECOPY 0x39",
            Opcode::GASPRICE => "GASPRICE 0x3A",
            Opcode::EXTCODESIZE => "EXTCODESIZE 0x3B",
            Opcode::EXTCODECOPY => "EXTCODECOPY 0x3C",
            Opcode::RETURNDATASIZE => "RETURNDATASIZE 0x3D",
            Opcode::RETURNDATACOPY => "RETURNDATACOPY 0x3E",
            Opcode::EXTCODEHASH => "EXTCODEHASH 0x3F",
            Opcode::BLOCKHASH => "BLOCKHASH 0x40",
            Opcode::COINBASE => "COINBASE 0x41",
            Opcode::TIMESTAMP => "TIMESTAMP 0x42",
            Opcode::NUMBER => "NUMBER 0x43",
            Opcode::DIFFICULTY => "DIFFICULTY 0x44",
            Opcode::GASLIMIT => "GASLIMIT 0x45",
            Opcode::CHAINID => "CHAINID 0x46",
            Opcode::SELFBALANCE => "SELFBALANCE 0x47",
            Opcode::BASEFEE => "BASEFEE 0x48",
            Opcode::POP => "POP 0x50",
            Opcode::MLOAD => "MLOAD 0x51",
            Opcode::MSTORE => "MSTORE 0x52",
            Opcode::MSTORE8 => "MSTORE8 0x53",
            Opcode::SLOAD => "SLOAD 0x54",
            Opcode::SSTORE => "SSTORE 0x55",
            Opcode::JUMP => "JUMP 0x56",
            Opcode::JUMPI => "JUMPI 0x57",
            Opcode::PC => "PC 0x58",
            Opcode::MSIZE => "MSIZE 0x59",
            Opcode::GAS => "GAS 0x5A",
            Opcode::JUMPDEST => "JUMPDEST 0x5B",
            Opcode::PUSH(1) => "PUSH1 0x60",
            Opcode::PUSH(2) => "PUSH2 0x61",
            Opcode::PUSH(3) => "PUSH3 0x62",
            Opcode::PUSH(4) => "PUSH4 0x63",
            Opcode::PUSH(5) => "PUSH5 0x64",
            Opcode::PUSH(6) => "PUSH6 0x65",
            Opcode::PUSH(7) => "PUSH7 0x66",
            Opcode::PUSH(8) => "PUSH8 0x67",
            Opcode::PUSH(9) => "PUSH9 0x68",
            Opcode::PUSH(10) => "PUSH10 0x69",
            Opcode::PUSH(11) => "PUSH11 0x6A",
            Opcode::PUSH(12) => "PUSH12 0x6B",
            Opcode::PUSH(13) => "PUSH13 0x6C",
            Opcode::PUSH(14) => "PUSH14 0x6D",
            Opcode::PUSH(15) => "PUSH15 0x6E",
            Opcode::PUSH(16) => "PUSH16 0x6F",
            Opcode::PUSH(17) => "PUSH17 0x70",
            Opcode::PUSH(18) => "PUSH18 0x71",
            Opcode::PUSH(19) => "PUSH19 0x72",
            Opcode::PUSH(20) => "PUSH20 0x73",
            Opcode::PUSH(21) => "PUSH21 0x74",
            Opcode::PUSH(22) => "PUSH22 0x75",
            Opcode::PUSH(23) => "PUSH23 0x76",
            Opcode::PUSH(24) => "PUSH24 0x77",
            Opcode::PUSH(25) => "PUSH25 0x78",
            Opcode::PUSH(26) => "PUSH26 0x79",
            Opcode::PUSH(27) => "PUSH27 0x7A",
            Opcode::PUSH(28) => "PUSH28 0x7B",
            Opcode::PUSH(29) => "PUSH29 0x7C",
            Opcode::PUSH(30) => "PUSH30 0x7D",
            Opcode::PUSH(31) => "PUSH31 0x7E",
            Opcode::PUSH(32) => "PUSH32 0x7F",
            Opcode::DUP(1) => "DUP1 0x80",
            Opcode::DUP(2) => "DUP2 0x81",
            Opcode::DUP(3) => "DUP3 0x82",
            Opcode::DUP(4) => "DUP4 0x83",
            Opcode::DUP(5) => "DUP5 0x84",
            Opcode::DUP(6) => "DUP6 0x85",
            Opcode::DUP(7) => "DUP7 0x86",
            Opcode::DUP(8) => "DUP8 0x87",
            Opcode::DUP(9) => "DUP9 0x88",
            Opcode::DUP(10) => "DUP10 0x89",
            Opcode::DUP(11) => "DUP11 0x8A",
            Opcode::DUP(12) => "DUP12 0x8B",
            Opcode::DUP(13) => "DUP13 0x8C",
            Opcode::DUP(14) => "DUP14 0x8D",
            Opcode::DUP(15) => "DUP15 0x8E",
            Opcode::DUP(16) => "DUP16 0x8F",
            Opcode::SWAP(1) => "SWAP1 0x90",
            Opcode::SWAP(2) => "SWAP2 0x91",
            Opcode::SWAP(3) => "SWAP3 0x92",
            Opcode::SWAP(4) => "SWAP4 0x93",
            Opcode::SWAP(5) => "SWAP5 0x94",
            Opcode::SWAP(6) => "SWAP6 0x95",
            Opcode::SWAP(7) => "SWAP7 0x96",
            Opcode::SWAP(8) => "SWAP8 0x97",
            Opcode::SWAP(9) => "SWAP9 0x98",
            Opcode::SWAP(10) => "SWAP10 0x99",
            Opcode::SWAP(11) => "SWAP11 0x9A",
            Opcode::SWAP(12) => "SWAP12 0x9B",
            Opcode::SWAP(13) => "SWAP13 0x9C",
            Opcode::SWAP(14) => "SWAP14 0x9D",
            Opcode::SWAP(15) => "SWAP15 0x9E",
            Opcode::SWAP(16) => "SWAP16 0x9F",
            Opcode::LOG(0) => "LOG0 0xA0",
            Opcode::LOG(1) => "LOG1 0xA1",
            Opcode::LOG(2) => "LOG2 0xA2",
            Opcode::LOG(3) => "LOG3 0xA3",
            Opcode::LOG(4) => "LOG4 0xA4",
            Opcode::CREATE => "CREATE 0xF0",
            Opcode::CALL => "CALL 0xF1",
            Opcode::CALLCODE => "CALLCODE 0xF2",
            Opcode::RETURN => "RETURN 0xF3",
            Opcode::DELEGATECALL => "DELEGATECALL 0xF4",
            Opcode::CREATE2 => "CREATE2 0xF5",
            Opcode::STATICCALL => "STATICCALL 0xFA",
            Opcode::REVERT => "REVERT 0xFD",
            Opcode::SELFDESTRUCT => "SELFDESTRUCT 0xFF",
            _ => "INVALID 0xFE"
        }
    }
}
impl Opcode {
    pub fn is_push(self) -> bool {
        match self {
            Opcode::PUSH(_) => true,
            _ => false,
        }
    }
    pub fn is_pop(self) -> bool {
        match self {
            Opcode::POP => true,
            _ => false,
        }
    }
    pub fn min_gas(self) -> usize {
        match self {
            Opcode::STOP | Opcode::RETURN | Opcode::REVERT => 0,
            Opcode::JUMPDEST => 1,
            Opcode::ADDRESS | Opcode::ORIGIN | Opcode::CALLER | Opcode::CALLVALUE | Opcode::CALLDATASIZE | Opcode::CODESIZE | Opcode::GASPRICE | Opcode::RETURNDATASIZE | Opcode::COINBASE | Opcode::TIMESTAMP | Opcode::NUMBER | Opcode::DIFFICULTY | Opcode::GASLIMIT | Opcode::CHAINID | Opcode::BASEFEE | Opcode::POP | Opcode::PC | Opcode::MSIZE | Opcode::GAS => 2,
            Opcode::MUL | Opcode::SUB | Opcode::DIV | Opcode::SDIV | Opcode::MOD | Opcode::SMOD | Opcode::SIGNEXTEND | Opcode::SELFBALANCE  => 5,
            Opcode::ADDMOD | Opcode::MULMOD | Opcode::JUMP => 8,
            Opcode::EXP | Opcode::JUMPI => 10,
            Opcode::BLOCKHASH => 20,
            Opcode::SHA3 => 30,
            Opcode::BALANCE | Opcode::EXTCODESIZE | Opcode::EXTCODECOPY | Opcode::EXTCODEHASH | Opcode::SLOAD | Opcode::SSTORE | Opcode::CALL | Opcode::CALLCODE | Opcode::STATICCALL => 100,
            Opcode::LOG(topic) => 375+(375*topic),
            Opcode::SELFDESTRUCT => 5000,
            Opcode::CREATE | Opcode::CREATE2 => 32000,
            _ => 3
        }
    }
    pub fn peek_operand(&self, op_indx: usize, bytecode: &[u8]) -> (Option<[u8; 32]>, usize) {
        let operand_size = match self {
            Opcode::PUSH(bytes) => Some((bytes+1).into()),
            _ => Some(0)
        }.unwrap();
        
        if operand_size == 0 {
            return (None, op_indx+1)
        }

        // If operand cannot be converted to sized array (need 32 bytes), then skip ix's operand completely.
        match bytecode[op_indx+1..(op_indx+operand_size)].try_into() {
            Ok(sized_operand) => (Some(sized_operand), op_indx+operand_size),
            Err(err) => {
                eprintln!("{}", err);
                (None, op_indx+operand_size)
            }
        }
        //(Some(bytecode[op_indx+1..op_indx+operand_size].try_into().expect("placeholder")), op_indx+operand_size)
    }
}
