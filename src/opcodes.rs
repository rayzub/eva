#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub enum Opcode { 
    // 0x - 0x0B (Stop and Arithmetic Operations)
    STOP, ADD, MUL, SUB, DIV, SDIV, MOD, SMOD, ADDMOD, MULMOD, EXP, SIGNEXTEND,

    // 0x1 - 0x1D (Comparison & Bitwise Logic Operations)
    LT, GT, SLT, SGT, EQ, ISZERO, AND, OR, XOR, NOT, BYTE, SHL, SHR, SAR,

    SHA3, // (0x2 SHA3)

    // 0x3 - 0x3F (Environmental Information)
    ADDRESS, BALANCE, ORIGIN, CALLER, CALLVALUE, CALLDATALOAD, CALLDATASIZE, CALLDATACOPY, CODESIZE, CODECOPY, GASPRICE, EXTCODESIZE,
    EXTCODECOPY, RETURNDATASIZE, RETURNDATACOPY, EXTCODEHASH,

    // 0x"40" - 0x"48" (Block information)
    BLOCKHASH, COINBASE, TIMESTAMP, NUMBER, DIFFICULTY, GASLIMIT, CHAINID, SELFBALANCE, BASEFEE,

    // 0x"50" - 0x5B (Stack Memory Storage and Flow Operations)
    POP, MLOAD, MSTORE, MSTORE8, SLOAD, SSTORE, JUMP, JUMPI, PC, MSIZE, GAS, JUMPDEST,

    // 0x"60" - 0x7F (Push Operations)
    PUSH(u8),
    // 0x"80" - 0x8F (Duplication Operations)
    DUP(u8),
    // 0x"90" - 0x9F (Exchange Operations)
    SWAP(u8),
    // 0xA0 - 0xA4 (Logging Operations)
    LOG(u8),

    // 0xF0 - 0xFF (System operations)
    CREATE, CALL, CALLCODE, RETURN, DELEGATECALL, CREATE2, STATICCALL, REVERT, INVALID, SELFDESTRUCT
}
impl From<&str> for Opcode {
    fn from(val: &str) -> Opcode {
        match val {
            "00" => Opcode::STOP,
            "01" => Opcode::ADD,
            "02" => Opcode::MUL,
            "03" => Opcode::SUB,
            "04" => Opcode::DIV,
            "05" => Opcode::SDIV,
            "06" => Opcode::MOD,
            "07" => Opcode::SMOD,
            "08" => Opcode::ADDMOD,
            "09" => Opcode::MULMOD,
            "0A" => Opcode::EXP,
            "0B" => Opcode::SIGNEXTEND,
            "10" => Opcode::LT,
            "11" => Opcode::GT,
            "12" => Opcode::SLT,
            "13" => Opcode::SGT,
            "14" => Opcode::EQ,
            "15" => Opcode::ISZERO,
            "16" => Opcode::AND,
            "17" => Opcode::OR,
            "18" => Opcode::XOR,
            "19" => Opcode::NOT,
            "1A" => Opcode::BYTE,
            "1B" => Opcode::SHL,
            "1C" => Opcode::SHR,
            "1D" => Opcode::SAR,
            "20" => Opcode::SHA3,
            "30" => Opcode::ADDRESS,
            "31" => Opcode::BALANCE,
            "32" => Opcode::ORIGIN,
            "33" => Opcode::CALLER,
            "34" => Opcode::CALLVALUE,
            "35" => Opcode::CALLDATALOAD,
            "36" => Opcode::CALLDATASIZE,
            "37" => Opcode::CALLDATACOPY,
            "38" => Opcode::CODESIZE,
            "39" => Opcode::CODECOPY,
            "3A" => Opcode::GASPRICE,
            "3B" => Opcode::EXTCODESIZE,
            "3C" => Opcode::EXTCODECOPY,
            "3D" => Opcode::RETURNDATASIZE,
            "3E" => Opcode::RETURNDATACOPY,
            "3F" => Opcode::EXTCODEHASH,
            "40" => Opcode::BLOCKHASH,
            "41" => Opcode::COINBASE,
            "42" => Opcode::TIMESTAMP,
            "43" => Opcode::NUMBER,
            "44" => Opcode::DIFFICULTY,
            "45" => Opcode::GASLIMIT,
            "46" => Opcode::CHAINID,
            "47" => Opcode::SELFBALANCE,
            "48" => Opcode::BASEFEE,
            "50" => Opcode::POP,
            "51" => Opcode::MLOAD,
            "52" => Opcode::MSTORE,
            "53" => Opcode::MSTORE8,
            "54" => Opcode::SLOAD,
            "55" => Opcode::SSTORE,
            "56" => Opcode::JUMP,
            "57" => Opcode::JUMPI,
            "58" => Opcode::PC,
            "59" => Opcode::MSIZE,
            "5A" => Opcode::GAS,
            "5B" => Opcode::JUMPDEST,
            "60" => Opcode::PUSH(1),
            "61" => Opcode::PUSH(2),
            "62" => Opcode::PUSH(3),
            "63" => Opcode::PUSH(4),
            "64" => Opcode::PUSH(5),
            "65" => Opcode::PUSH(6),
            "66" => Opcode::PUSH(7),
            "67" => Opcode::PUSH(8),
            "68" => Opcode::PUSH(9),
            "69" => Opcode::PUSH(10),
            "6A" => Opcode::PUSH(11),
            "6B" => Opcode::PUSH(12),
            "6C" => Opcode::PUSH(13),
            "6D" => Opcode::PUSH(14),
            "6E" => Opcode::PUSH(15),
            "6F" => Opcode::PUSH(16),
            "70" => Opcode::PUSH(17),
            "71" => Opcode::PUSH(18),
            "72" => Opcode::PUSH(19),
            "73" => Opcode::PUSH(20),
            "74" => Opcode::PUSH(21),
            "75" => Opcode::PUSH(22),
            "76" => Opcode::PUSH(23),
            "77" => Opcode::PUSH(24),
            "78" => Opcode::PUSH(25),
            "79" => Opcode::PUSH(26),
            "7A" => Opcode::PUSH(27),
            "7B" => Opcode::PUSH(28),
            "7C" => Opcode::PUSH(29),
            "7D" => Opcode::PUSH(30),
            "7E" => Opcode::PUSH(31),
            "7F" => Opcode::PUSH(32),
            "80" => Opcode::DUP(1),
            "81" => Opcode::DUP(2),
            "82" => Opcode::DUP(3),
            "83" => Opcode::DUP(4),
            "84" => Opcode::DUP(5),
            "85" => Opcode::DUP(6),
            "86" => Opcode::DUP(7),
            "87" => Opcode::DUP(8),
            "88" => Opcode::DUP(9),
            "89" => Opcode::DUP(10),
            "8A" => Opcode::DUP(11),
            "8B" => Opcode::DUP(12),
            "8C" => Opcode::DUP(13),
            "8D" => Opcode::DUP(14),
            "8E" => Opcode::DUP(15),
            "8F" => Opcode::DUP(16),
            "90" => Opcode::SWAP(1),
            "91" => Opcode::SWAP(2),
            "92" => Opcode::SWAP(3),
            "93" => Opcode::SWAP(4),
            "94" => Opcode::SWAP(5),
            "95" => Opcode::SWAP(6),
            "96" => Opcode::SWAP(7),
            "97" => Opcode::SWAP(8),
            "98" => Opcode::SWAP(9),
            "99" => Opcode::SWAP(10),
            "9A" => Opcode::SWAP(11),
            "9B" => Opcode::SWAP(12),
            "9C" => Opcode::SWAP(13),
            "9D" => Opcode::SWAP(14),
            "9E" => Opcode::SWAP(15),
            "9F" => Opcode::SWAP(16),
            "A0" => Opcode::LOG(0),
            "A1" => Opcode::LOG(1),
            "A2" => Opcode::LOG(2),
            "A3" => Opcode::LOG(3),
            "A4" => Opcode::LOG(4),
            "F0" => Opcode::CREATE,
            "F1" => Opcode::CALL,
            "F2" => Opcode::CALLCODE,
            "F3" => Opcode::RETURN,
            "F4" => Opcode::DELEGATECALL,
            "F5" => Opcode::CREATE2,
            "FA" => Opcode::STATICCALL,
            "FD" => Opcode::REVERT,
            "FF" => Opcode::SELFDESTRUCT,
            _ => Opcode::INVALID, // 0xFE | _ makes no difference
        }
    }
}

impl<'a> From<Opcode> for &'a str {
    fn from(val: Opcode) -> &'a str {
        match val {
            Opcode::STOP => "0x00",
            Opcode::ADD  => "0x01",
            Opcode::MUL  => "0x02",
            Opcode::SUB  => "0x03",
            Opcode::DIV  => "0x04",
            Opcode::SDIV => "0x05",
            Opcode::MOD  => "0x06",
            Opcode::SMOD => "0x07",
            Opcode::ADDMOD => "0x08",
            Opcode::MULMOD => "0x09",
            Opcode::EXP => "0x0A",
            Opcode::SIGNEXTEND => "0x0B",
            Opcode::LT => "0x10",
            Opcode::GT => "0x11",
            Opcode::SLT => "0x12",
            Opcode::SGT => "0x13",
            Opcode::EQ => "0x14",
            Opcode::ISZERO => "0x15",
            Opcode::AND => "0x16",
            Opcode::OR => "0x17",
            Opcode::XOR => "0x18",
            Opcode::NOT => "0x19",
            Opcode::BYTE => "0x1A",
            Opcode::SHL => "0x1B",
            Opcode::SHR => "0x1C",
            Opcode::SAR => "0x1D",
            Opcode::SHA3 => "0x20",
            Opcode::ADDRESS => "0x30",
            Opcode::BALANCE => "0x31",
            Opcode::ORIGIN => "0x32",
            Opcode::CALLER => "0x33",
            Opcode::CALLVALUE => "0x34",
            Opcode::CALLDATALOAD => "0x35",
            Opcode::CALLDATASIZE => "0x36",
            Opcode::CALLDATACOPY => "0x37",
            Opcode::CODESIZE => "0x38",
            Opcode::CODECOPY => "0x39",
            Opcode::GASPRICE => "0x3A",
            Opcode::EXTCODESIZE => "0x3B",
            Opcode::EXTCODECOPY => "0x3C",
            Opcode::RETURNDATASIZE => "0x3D",
            Opcode::RETURNDATACOPY => "0x3E",
            Opcode::EXTCODEHASH => "0x3F",
            Opcode::BLOCKHASH => "0x40",
            Opcode::COINBASE => "0x41",
            Opcode::TIMESTAMP => "0x42",
            Opcode::NUMBER => "0x43",
            Opcode::DIFFICULTY => "0x44",
            Opcode::GASLIMIT => "0x45",
            Opcode::CHAINID => "0x46",
            Opcode::SELFBALANCE => "0x47",
            Opcode::BASEFEE => "0x48",
            Opcode::POP => "0x50",
            Opcode::MLOAD => "0x51",
            Opcode::MSTORE => "0x52",
            Opcode::MSTORE8 => "0x53",
            Opcode::SLOAD => "0x54",
            Opcode::SSTORE => "0x55",
            Opcode::JUMP => "0x56",
            Opcode::JUMPI => "0x57",
            Opcode::PC => "0x58",
            Opcode::MSIZE => "0x59",
            Opcode::GAS => "0x5A",
            Opcode::JUMPDEST => "0x5B",
            Opcode::PUSH(1) => "0x60",
            Opcode::PUSH(2) => "0x61",
            Opcode::PUSH(3) => "0x62",
            Opcode::PUSH(4) => "0x63",
            Opcode::PUSH(5) => "0x64",
            Opcode::PUSH(6) => "0x65",
            Opcode::PUSH(7) => "0x66",
            Opcode::PUSH(8) => "0x67",
            Opcode::PUSH(9) => "0x68",
            Opcode::PUSH(10) => "0x69",
            Opcode::PUSH(11) => "0x6A",
            Opcode::PUSH(12) => "0x6B",
            Opcode::PUSH(13) => "0x6C",
            Opcode::PUSH(14) => "0x6D",
            Opcode::PUSH(15) => "0x6E",
            Opcode::PUSH(16) => "0x6F",
            Opcode::PUSH(17) => "0x70",
            Opcode::PUSH(18) => "0x71",
            Opcode::PUSH(19) => "0x72",
            Opcode::PUSH(20) => "0x73",
            Opcode::PUSH(21) => "0x74",
            Opcode::PUSH(22) => "0x75",
            Opcode::PUSH(23) => "0x76",
            Opcode::PUSH(24) => "0x77",
            Opcode::PUSH(25) => "0x78",
            Opcode::PUSH(26) => "0x79",
            Opcode::PUSH(27) => "0x7A",
            Opcode::PUSH(28) => "0x7B",
            Opcode::PUSH(29) => "0x7C",
            Opcode::PUSH(30) => "0x7D",
            Opcode::PUSH(31) => "0x7E",
            Opcode::PUSH(32) => "0x7F",
            Opcode::DUP(1) => "0x80",
            Opcode::DUP(2) => "0x81",
            Opcode::DUP(3) => "0x82",
            Opcode::DUP(4) => "0x83",
            Opcode::DUP(5) => "0x84",
            Opcode::DUP(6) => "0x85",
            Opcode::DUP(7) => "0x86",
            Opcode::DUP(8) => "0x87",
            Opcode::DUP(9) => "0x88",
            Opcode::DUP(10) => "0x89",
            Opcode::DUP(11) => "0x8A",
            Opcode::DUP(12) => "0x8B",
            Opcode::DUP(13) => "0x8C",
            Opcode::DUP(14) => "0x8D",
            Opcode::DUP(15) => "0x8E",
            Opcode::DUP(16) => "0x8F",
            Opcode::SWAP(1) => "0x90",
            Opcode::SWAP(2) => "0x91",
            Opcode::SWAP(3) => "0x92",
            Opcode::SWAP(4) => "0x93",
            Opcode::SWAP(5) => "0x94",
            Opcode::SWAP(6) => "0x95",
            Opcode::SWAP(7) => "0x96",
            Opcode::SWAP(8) => "0x97",
            Opcode::SWAP(9) => "0x98",
            Opcode::SWAP(10) => "0x99",
            Opcode::SWAP(11) => "0x9A",
            Opcode::SWAP(12) => "0x9B",
            Opcode::SWAP(13) => "0x9C",
            Opcode::SWAP(14) => "0x9D",
            Opcode::SWAP(15) => "0x9E",
            Opcode::SWAP(16) => "0x9F",
            Opcode::LOG(0) => "0xA0",
            Opcode::LOG(1) => "0xA1",
            Opcode::LOG(2) => "0xA2",
            Opcode::LOG(3) => "0xA3",
            Opcode::LOG(4) => "0xA4",
            Opcode::CREATE => "0xF0",
            Opcode::CALL => "0xF1",
            Opcode::CALLCODE => "0xF2",
            Opcode::RETURN => "0xF3",
            Opcode::DELEGATECALL => "0xF4",
            Opcode::CREATE2 => "0xF5",
            Opcode::STATICCALL => "0xFA",
            Opcode::REVERT => "0xFD",
            Opcode::SELFDESTRUCT => "0xFF",
            _ => "0xFE"
        }
    }
}

pub fn peek_operand<'a> (op_indx: usize, opcode: Opcode, bytecode: &'a str) -> (Option<&'a str>, usize) {
    let max_byte_size = match opcode {
        Opcode::PUSH(bytes) => Some((bytes*2).into()),
        Opcode::DUP(bytes) => Some((bytes*2).into()),
        Opcode::SWAP(bytes) => Some((bytes*2).into()),
        Opcode::LOG(bytes) => Some((bytes*2).into()),
        _ => Some(0)
    };

    

    let min = std::cmp::min(bytecode.len(), max_byte_size.unwrap());

    if min == 0 {
        return (None, op_indx)
    }
    (Some(&bytecode[op_indx..op_indx+min]), op_indx+min)
}